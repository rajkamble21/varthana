//to create model
npx sequelize model:generate --name User --attributes name:string,email:string,password:string,phone:string

//for migration
npx sequelize db:migrate

//always create a migration file if you are making changes to table
//we also need to define thoese changes into migration file as well as models
npx sequelize migration:create --name add-unique-constraint-to-email

//these are the changes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addConstraint('Users', {
      fields: ['email'],
      type: 'unique',
      name: 'unique_email'
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeConstraint('Users', 'unique_email');
  }
};


//if we want to add multiple columns

await queryInterface.addColumn('Users', 'address', {
      type: Sequelize.STRING
    })
    await queryInterface.addColumn('USers', 'permanent_address', {
      type: Sequelize.STRING
    })

// database model
A database model is a type of data model that determines the logical structure of a database. 
It fundamentally determines in which manner data can be stored, organized and manipulated.

// salt value - the higher value the more computationally intensive task
// const hashedPassword = await bcrypt.hash(password, 10);
// When we add a salt to the password, the resulting hash is unique for each user, even if they use the same password.

const hashedPassword = await bcrypt.hash(password, 10);




npx sequelize model:generate --name Address --attributes address:jsonb




sudo lsof -i :4000
sudo kill -9 22661